08:54 - array(1) {
  [0]=>
  object(Showcase\Models\Section)#13 (9) {
    ["migration"]=>
    string(7) "Section"
    ["idDetails":protected]=>
    array(1) {
      ["name"]=>
      string(2) "id"
    }
    ["db":protected]=>
    NULL
    ["variables"]=>
    array(0) {
    }
    ["id"]=>
    string(0) ""
    ["title"]=>
    string(24) "Analytics ETL Processing"
    ["text"]=>
    string(17605) "Analytics ETL is processed by means of SQL stored procedures called by SQL agent jobs. The SQL Agent job can be started from any failed steps if needed. Alternatively, Analytics ETL can be executed by calling the SQL stored procedures directly with the same parameters as in the SQL Agent Job. Because of this, the ETL process can be customized for different scenarios as needed, such as calling additional custom source systems as part of the job. The Analytics ETL agent job includes a number of steps that execute stored procedures within the databases of the Advanced Analytics Platform. Below we can find a list of the stored procedure executed in each database.The Analytics ETL&#160;agent job executes the following stored procedures in the InsightETL database.This stored procedure, executed at the beginning of Analytics ETL, creates a new batch in the Batch table and will perform in-place updates to the involved Batch records.This stored procedure reads the content of the AttributeCalculations table in InsightETL and, based on the Split, Calculations and Datasets definitions, it creates new columns in the target tables. In Analytics ETL, this stored procedure is directly executed twice, first on the tables imported in the InsightImport database and then on the tables imported into InsightSource. Furthermore, this stored procedure is internally called by the s_InsightStaging_Update stored procedure when Analytics ETL reaches its core steps in the InsightStaging database.This stored procedure applies business rules designed through the Rules Engine functionalities of InsightETL on a specific database whose name is specified as input parameter. In Analytics ETL, this stored procedure is directly executed three times, first on the tables imported in the InsightImport database, then on the tables loaded in InsightImport and then on the tables imported into InsightSource. Furthermore, this stored procedure is internally called by the s_InsightStaging_Update stored procedure when Analytics ETL reaches its core steps in the InsightStaging database.This stored procedure performs a count of the records processed within each database involved in ETL processing. It is executed several times during ETL for records count reconciliation between source and target databased. The results of these calculations are stored in the dbo.TableRowCountAudit log table in InsightETL.Forces all of the rowgroups into the columnstore and then to combine the rowgroups into fewer rowgroups with more rows. The ALTER INDEX REORGANIZE online operation also removes rows that have been marked as deleted from the columnstore index tables. During Analytics ETL, this stored procedure is executed twice for maintence reasons, first within the InsightLanding database and then in the InsightWarehouse.Example:EXEC&#160; [dbo].[s_ColumnStoreIndex_Defragmentation]&#160;&#160;&#160;&#160;@DatabaseName = N'InsightLanding',&#160;&#160;&#160;&#160;@CompressRowGroupsWhenGT = 5000,&#160;&#160;&#160;&#160;@MergeRowGroupsWhenLT = 150000,&#160;&#160;&#160;&#160;@DeletedTotalRowPercentage = 10,&#160;&#160;&#160;&#160;@DeletedSegmentsRowPercentage = 20,&#160;&#160;&#160;&#160;@EmptySegmentsAllowed = 0,&#160;&#160;&#160;&#160;@ExecOrPrint = N'EXEC',&#160;&#160;&#160;&#160;@BatchNum = nullThis stored procedure marks the completion of any batch executed, either ‘CompletedWithError’ if there are error(s) or ‘CompletedSuccessfully’ when no error is encountered. It executed at the end of the Analytics ETL agent job.Furthrmore, InsightETL is used to set the current date through a SQL statement similar to the one below.Example:declare @CurrentETLDate date = (select max(mis_date) from InsightImport.dbo.DATES);UPDATE CurrentDate set BusinessDate =&#160; @CurrentETLDate;The Analytics ETL&#160;agent job executes the following stored procedures in the InsightImport database.This procedure manages the control of the process to Bulk Insert from CSV files to SQL in parallel with DQI (Data Quality Import) or/and DPI (Data Profiler Import).This procedure parses multi-values, sub-values, and local reference fields creating the associated ‘sub’ tables.This procedure parses Consolidation keys for GL-related tables like RE_CONSOL_SPEC_ENTRY and any CRF file. It execues the following steps in Analytics ETL:Updates Batch logEXEC [InsightETL].dbo.s_MergeUpdateBatchStatus null, null, null Runs the Import. Exec [Insight].[s_Import_Control] @PathName = 'E:\InsightImport', @TableName = 'All', @ReCreateTables = 0, @TableType = 'Regular', @SystemTablesExist = 0, @BatchNum = null, @TotalThreads = null;Checks imported tables against HASH_TOTALExec [InsightImport].[Insight].[s_ImportDataReportErrors] @TableName = 'All', @BatchNum = null;Performs Local reference fields parsingExec [Insight].[s_Import_Control] @PathName = 'E:\InsightImport', @TableName = 'All', @ReCreateTables = 0, @TableType = 'localref', @SystemTablesExist = 1, @BatchNum = null, @TotalThreads = null;Performs Multi-value parsingExec [Insight].[s_Import_Control] @PathName = 'E:\InsightImport', @TableName = 'All', @ReCreateTables = 0, @TableType = 'mv', @SystemTablesExist = 1, @BatchNum = null, @TotalThreads = null;Performs Multi-value sub-value parsingExec [Insight].[s_Import_Control] @PathName = 'E:\InsightImport', @TableName = 'All', @ReCreateTables = 0, @TableType = 'mvsv', @SystemTablesExist = 1, @BatchNum = null, @TotalThreads = null;Performs sub-value parsing for local reference fieldsExec [Insight].[s_Import_Control] @PathName = 'E:\InsightImport', @TableName = 'All', @ReCreateTables = 0, @TableType = 'lrsv', @SystemTablesExist = 1, @BatchNum = null, @TotalThreads = null;Parses consolidation keys for GLexec [Insight].[s_T24ConsolKeys_Add] @TableName = 'All', @BatchNum = null;This procedure builds the Chart of Accounts table.The Analytics ETL&#160;agent job executes the following stored procedure in the InsightLanding database. Loads data into InsightLanding’s columnstore index tables.This procedure can be updated or run multiple times depending the source systems considered.Example:declare @CurrentETLDate date = (select max(BusinessDate) from InsightETL.dbo.CurrentDate);EXEC dbo.s_InsightLanding_CSI_Table_Update @SourceName = 'BS', @BSDate = @CurrentETLDate, @UserId = 'dbo', @CreateRowBaseIndex = 0, @DataCompression = 'COLUMNSTORE', @UpdateTableSchema = 1, @BatchNum = null, @TotalThreads = null;The Analytics ETL&#160;agent job executes the following stored procedure in the InsightSource database.Loads data from InsightLanding columnstore index tables into the InsightSource database. This procedure can be updated or run multiple times depending the source systems considered.Example:declare @CurrentETLDate date = (select max (BusinessDate) from InsightETL.dbo.CurrentDate);EXEC dbo.s_InsightSource_CSI_Update @sources = 'BS', @BSDate = @CurrentETLDate, @BatchNum = null, @TotalThreads = null;The Analytics ETL&#160;agent job executes the following stored procedures in the InsightStaging database.Extracts data into Staging Tables.Example:EXEC dbo.s_InsightStaging_Update @ExecuteExtractSteps = 1, @ExecuteTransformLoadSteps = 0, @BatchNum = null, @TotalThreads = null; Transforms data into Dim and Facts and Loads InsightWarehouseExample:EXEC dbo.s_InsightStaging_Update @ExecuteExtractSteps = 0, @ExecuteTransformLoadSteps = 1, @BatchNum = null, @TotalThreads = null; The Analytics ETL&#160;agent job executes the following stored procedures in the InsightWarehouse database.Updates Analytics ETL statistics.Enables the business date.Example:Declare @date as smalldatetime = (select&#160; MAX(BusinessDate) from InsightStaging.dbo.sourceDate ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EXEC dbo.s_BusinessDate_Enable @Date=@date, @Reset=null, @BatchNum=nullThe Analytics ETL job runs the above-described stored procedures within the following steps.StepDescription (SQL Run)Create a new Batch ID for the current ETL runEXEC [InsightETL].dbo.s_MergeUpdateBatchStatus null, null, nullInsight Base TablesExec [InsightImport].[Insight].[s_ImportBaseTables] @CsvDir = 'E:\InsightImport', @TableName = 'All', @SystemTablesExist = 0, @BatchNum = null, @TotalThreads = null;Local Ref ParsingExec [InsightImport].[Insight].[s_ImportSubTables] @TableName = 'All', @TableType = 'LocalRef', @BatchNum = null, @TotalThreads = null;Multi-value ParsingExec [InsightImport].[Insight].[s_ImportSubTables] @TableName = 'All', @TableType = 'MV', @BatchNum = null, @TotalThreads = null;Multi-value Sub-value ParsingExec [InsightImport].[Insight].[s_ImportSubTables] @TableName = 'All', @TableType = 'MVSV', @BatchNum = null, @TotalThreads = null;Local Ref Sub-value ParsingExec [InsightImport]. [Insight].[s_ImportSubTables] @TableName = 'All', @TableType = 'LRSV', @BatchNum = null, @TotalThreads = null;Parsing Consol KeysExec [InsightImport].[Insight].[s_T24ConsolKeys_Add] @TableName = 'All', @BatchNum = null;Build COAexec [InsightImport].[Insight].[s_BuildCOA]Insight Attributes Calculations-Importexec s_CreateColumnCalculations 'InsightImport','All','dbo','All',1exec s_CreateColumnCalculations 'InsightImport','All','dbo','All',2exec s_CreateIndexes 'All','InsightImport'Create InsightImport Rulesdeclare @CurrentETLDate date = (select max(mis_date) from InsightImport.dbo.DATES);--InsightImport RulesEXEC&#160;&#160;&#160;&#160;[InsightETL.[ [dbo].[s_CreateRuleGroup]&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@DatabaseName = N'InsightImport',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@TableName = N'all',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@SchemaName = N'all', --not hooked up -- will be all&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@ExecutionPhase = N'all',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@ExecutionStep = 0, --all steps&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@BusinessDate = @CurrentETLDate,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@IsPersisted = 2,--all&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@RuleDefinitionId = null,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@BatchNum = NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@StagingEventLogId = null;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;----------------------Setup Current ETL Data[USE InsightETL]declare @CurrentETLDate date = (select max(mis_date) from InsightImport.dbo.DATES);UPDATECurrentDate set BusinessDate =&#160; @CurrentETLDate;InsightLanding CSI BS Updatedeclare @CurrentETLDate date = (select max(BusinessDate) from InsightETL.dbo.CurrentDate);&#160;EXEC [InsightLanding].dbo.s_InsightLanding_CSI_Table_Update @SourceName = 'BS', @BSDate = @CurrentETLDate, @UserId = 'dbo', @CreateRowBaseIndex = 0, @DataCompression = 'COLUMNSTORE', @UpdateTableSchema = 1, @BatchNum = null, @TotalThreads = null;InsightLanding CSI DefragmentationEXEC&#160; [InsightETL].[dbo].[s_ColumnStoreIndex_Defragmentation]&#160;&#160;&#160;&#160;@DatabaseName = N'InsightLanding',&#160;&#160;&#160;&#160;@CompressRowGroupsWhenGT = 5000,&#160;&#160;&#160;&#160;@MergeRowGroupsWhenLT = 150000,&#160;&#160;&#160;&#160;@DeletedTotalRowPercentage = 10,&#160;&#160;&#160;&#160;@DeletedSegmentsRowPercentage = 20,&#160;&#160;&#160;&#160;@EmptySegmentsAllowed = 0,&#160;&#160;&#160;&#160;@ExecOrPrint = N'EXEC',&#160;&#160;&#160;&#160;@BatchNum = null&#160;Create InsightLanding Rulesdeclare @CurrentETLDate date = (select max(mis_date) from InsightImport.dbo.DATES);--InsightImport RulesEXEC&#160;&#160;&#160;&#160;[InsightETL.[ [dbo].[s_CreateRuleGroup]&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@DatabaseName = N'InsightLanding',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@TableName = N'all',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@SchemaName = N'all', --not hooked up -- will be all&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@ExecutionPhase = N'all',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@ExecutionStep = 0, --all steps&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@BusinessDate = @CurrentETLDate,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@IsPersisted = 2,--all&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@RuleDefinitionId = null,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@BatchNum = NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@StagingEventLogId = null;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;----------------------Insight Source UpdateDeclare @CurrentETLDate date = (select max (BusinessDate) from InsightETL.dbo.CurrentDate);&#160;EXEC [InsightSource].dbo.s_InsightSource_CSI_Update @sources = 'BS', @BSDate = @CurrentETLDate, @BatchNum = null, @TotalThreads = null;Insight Attributes Calculations-Source[USE InsightETL]exec s_CreateColumnCalculations 'InsightImport','All','dbo','All',1exec s_CreateColumnCalculations 'InsightImport','All','dbo','All',2exec s_CreateIndexes 'All','InsightSource'Create InsightSource Rulesdeclare @CurrentETLDate date = (select max(mis_date) from InsightImport.dbo.DATES);--InsightImport RulesEXEC&#160;&#160;&#160;&#160;[InsightETL.[ [dbo].[s_CreateRuleGroup]&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@DatabaseName = N'InsightSource',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@TableName = N'all',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@SchemaName = N'all', --not hooked up -- will be all&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@ExecutionPhase = N'all',&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@ExecutionStep = 0, --all steps&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@BusinessDate = @CurrentETLDate,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@IsPersisted = 2,--all&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@RuleDefinitionId = null,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@BatchNum = NULL,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;@StagingEventLogId = null;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;----------------------InsightStaging Update – ExtractEXEC [InsightStaging].dbo.s_InsightStaging_Update @ExecuteExtractSteps = 1, @ExecuteTransformLoadSteps = 0, @BatchNum = null, @TotalThreads = null;InsightStaging Update – Transform/ LoadEXEC [InsightStaging].dbo.s_InsightStaging_Update @ExecuteExtractSteps = 0, @ExecuteTransformLoadSteps = 1, @BatchNum = null, @TotalThreads = null;Update Stats on SWEXEC sp_updatestatsEnabling Business Date[USE InsightWarehouse]declare @date as smalldatetime = (select&#160; MAX(BusinessDate) from InsightStaging.dbo.sourceDate ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EXEC dbo.s_BusinessDate_Enable @Date=@date, @Reset=null, @BatchNum=nullSet Completion of the Current ETL BatchEXEC InsightETL.dbo.s_SetBatchStatusFinished;InsightWarehuse CSI DefragmentationEXEC&#160; [InsightETL].[dbo].[s_ColumnStoreIndex_Defragmentation]&#160;&#160;&#160;&#160;@DatabaseName = N'InsightWarehouse',&#160;&#160;&#160;&#160;@CompressRowGroupsWhenGT = 5000,&#160;&#160;&#160;&#160;@MergeRowGroupsWhenLT = 150000,&#160;&#160;&#160;&#160;@DeletedTotalRowPercentage = 10,&#160;&#160;&#160;&#160;@DeletedSegmentsRowPercentage = 20,&#160;&#160;&#160;&#160;@EmptySegmentsAllowed = 0,&#160;&#160;&#160;&#160;@ExecOrPrint = N'EXEC',&#160;&#160;&#160;&#160;@BatchNum = null&#160;Process InsightWarehouseOLAP Database(only available if at least one Analytics Content Pack is deployed)See Process Analytics Cubes chapter.Refresh KPI CacheDeclare @KPICacheRefresh Nvarchar(50)&#160;&#160;&#160;&#160;SELECT @KPICacheRefresh = [Value]FROM [InsightWarehouse].[dbo].[DimSystemParameters]Where [Type] = 'Application' and [Name] = 'KPI Cache Refresh' and Active = 1&#160;IF @KPICacheRefresh = 'Enabled'EXEC msdb.dbo.sp_start_job @job_name = 'KPI Cache Maintenance'In case the Current ETL Batch ended with Error, Report and ExitEXEC InsightETL.dbo.s_SetBatchStatusFinished;If at least one Analytics Content Pack is deployed within the Advanced Analytics Platform, the Analytics ETL agent job will contain a step to process all Multidimensional Cubes are processed using.Example:Declare @BusinessDate date,@CommandText Nvarchar(200),@CubeProcessType Nvarchar(50)SELECT @CubeProcessType = case when [Value] is null or [Value] = '' Then'NoProcess' Else[Value] EndFROM [InsightWarehouse].[dbo].[DimSystemParameters]Where [Type] = 'Cube' and [Name] = 'ProcessType' and Active = 1SELECT case when @CubeProcessType is null or @CubeProcessType = '' Then'NoProcess' Else[Value] EndFROM [InsightWarehouse].[dbo].[DimSystemParameters]Where [Type] = 'Cube' and [Name] = 'ProcessType' and Active = 1--Print @CubeProcessType--Print @BusinessDate--Testing--Set @CubeProcessType = 'ProcessFull'--Set @CubeProcessType = 'NoProcess'----------------------------------------If @CubeProcessType = 'ProcessByPartition'BEGINPrint 'Process by Partition'EXEC msdb..sp_start_job @job_name= 'Process Insight Cubes - By Partition', @step_name = 'Update Process Date'END-----------------------------------If @CubeProcessType = 'ProcessFull'BEGINPrint 'Process full'EXEC msdb..sp_start_job @job_name= 'Process Insight Cubes - By Partition', @step_name = 'Full Process'END-----------------------------------If @CubeProcessType = 'NoProcess'BEGINPrint 'No Process'ENDAgent jobs can be scheduled. Double Click on the Agent Job record in SQL&#160;Server Management Studio and select Schedules to do so.The log file viewer can be used to view the history of job runs. In SQL Server Management Studio, right click on Jobs under SQL Server Agent, select “View History” from the right click menu.                                                  In this topic"
    ["created_at"]=>
    string(0) ""
    ["updated_at"]=>
    string(0) ""
  }
}

